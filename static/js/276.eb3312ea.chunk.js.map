{"version":3,"file":"static/js/276.eb3312ea.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.jsx","components/MoviesList/MoviesList.jsx","pages/MovieDeatails/MovieDetails.styled.jsx","pages/MovieDeatails/MovieDatails.jsx","components/Search/Search.styled.jsx","components/Search/Search.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const MovieList = styled.ul`\n  padding-left: 20px;\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n`;\nexport const MovieItem = styled.li`\n  list-style-type: none;\n`;\nexport const MovieImg = styled.img`\n  width: 300px;\n  border-radius: 16px;\n`;\n","import { MovieList, MovieItem, MovieImg } from './MoviesList.styled';\nimport { Link, useLocation } from 'react-router-dom';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n  const baseUrl = 'https://image.tmdb.org/t/p/w300';\n  const defaultImg =\n    'https://cdn.pixabay.com/photo/2018/11/03/15/51/here-3792307_1280.png';\n\n  return (\n    <MovieList>\n      {movies.map(movie => {\n        const name = movie.name ?? movie.title;\n\n        return (\n          <MovieItem key={movie.id}>\n            <Link to={`/movies/${movie.id}`} key={movie.id} state={location}>\n              <>\n                {movie.poster_path ? (\n                  <MovieImg\n                    src={`${baseUrl}${movie.poster_path}`}\n                    alt=\"poster\"\n                  />\n                ) : (\n                  defaultImg\n                )}\n              </>\n              {name}{' '}\n            </Link>\n          </MovieItem>\n        );\n      })}\n    </MovieList>\n  );\n};\n\nexport default MoviesList;\n","import styled from 'styled-components';\nimport { Link, NavLink } from 'react-router-dom';\n\nexport const Style = styled.div`\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #ddd;\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  border-radius: 16px;\n`;\nexport const GoBackLink = styled(Link)`\n  display: inline-block;\n  text-decoration: underline;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\nexport const MovieImg = styled.img`\n  width: 300px;\n  border-radius: 16px;\n`;\nexport const MovieName = styled.h2`\n  font-size: 30px;\n`;\nexport const OverviewText = styled.p`\n  font-size: 18px;\n  padding-right: 20px;\n`;\nexport const Genres = styled.h3`\n  font-weight: bold;\n`;\nexport const GenresText = styled.p`\n  font-size: 18px;\n`;\nexport const GenresStyles = styled.div`\n  display: flex;\n  gap: 8px;\n`;\nexport const AdInfo = styled.p``;\nexport const NavList = styled.ul`\n  display: flex;\n  gap: 60px;\n  align-items: center;\n  font-size: 20px;\n  font-weight: bold;\n`;\n\nexport const MovieInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 20px;\n  margin-right: 20px;\n`;\nexport const Movie = styled.div`\n  display: flex;\n`;\nexport const AdditionalNav = styled.div`\n  display: flex;\n  gap: 80px;\n  align-items: center;\n  margin-bottom: 24px;\n`;\nexport const NavLinkStyled = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  font-size: 20px;\n\n  &.active {\n    text-decoration: underline;\n  }\n`;\n","import { useParams, useLocation, Outlet } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Suspense, useRef } from 'react';\nimport {\n  Style,\n  MovieImg,\n  MovieName,\n  AdditionalNav,\n  NavLinkStyled,\n  OverviewText,\n  GenresText,\n  GoBackLink,\n  NavList,\n  Movie,\n  MovieInfo,\n  GenresStyles,\n} from './MovieDetails.styled';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { fetchMovieDetails } from 'services/api';\n\nconst baseUrl = 'https://image.tmdb.org/t/p/w300';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        if (movieId) {\n          const fetchedMovie = await fetchMovieDetails(movieId);\n          const releaseYear = new Date(fetchedMovie.release_date).getFullYear();\n          const percentage = (fetchedMovie.vote_average / 10) * 100;\n          setMovie({ ...fetchedMovie, releaseYear, percentage });\n        }\n      } catch (error) {\n        console.error('Error fetching movie details:', error);\n        setMovie(null);\n      }\n    };\n    fetchData();\n  }, [movieId]);\n\n  const defaultImg =\n    'https://cdn.pixabay.com/photo/2018/11/03/15/51/here-3792307_1280.png';\n\n  return (\n    <main>\n      {movie && (\n        <Style>\n          <GoBackLink to={backLink?.from ?? '/'}>Go back</GoBackLink>\n\n          <Movie>\n            <MovieImg\n              src={\n                movie.poster_path\n                  ? `${baseUrl}${movie.poster_path}`\n                  : defaultImg\n              }\n            ></MovieImg>\n\n            <MovieInfo>\n              <MovieName>\n                {movie.title} ({movie.releaseYear})\n              </MovieName>\n              <h3>Rating: {Math.round(movie.percentage)}%</h3>\n              <h3>Overview</h3>\n              <OverviewText>{movie.overview}</OverviewText>\n              <h3>Genres</h3>\n              <GenresStyles>\n                {movie.genres.map(genre => (\n                  <GenresText key={genre.id}>{genre.name}</GenresText>\n                ))}\n              </GenresStyles>\n            </MovieInfo>\n          </Movie>\n          <AdditionalNav>\n            <h3>Additional information</h3>\n            <NavList>\n              <li>\n                <NavLinkStyled to=\"cast\">Cast</NavLinkStyled>\n              </li>\n              <li>\n                <NavLinkStyled to=\"reviews\">Reviews</NavLinkStyled>\n              </li>\n            </NavList>\n          </AdditionalNav>\n\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </Style>\n      )}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form``;\nexport const SearchFormInput = styled.input``;\nexport const SearchBtn = styled.button``;\n","import { SearchForm, SearchFormInput, SearchBtn } from './Search.styled';\nimport { useSearchParams } from 'react-router-dom';\nimport { useState } from 'react';\n\nexport const Search = ({ onSubmit }) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [inputValue, setInputValue] = useState('');\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(searchParams);\n    setSearchParams({ query: inputValue });\n    if (inputValue.trim() === '') {\n      return;\n    }\n    onSubmit(inputValue);\n  };\n\n  const handleChange = e => {\n    setInputValue(e.currentTarget.value);\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <SearchFormInput\n        type=\"text\"\n        autoComplete=\"off\"\n        autoFocus\n        value={inputValue}\n        onChange={handleChange}\n      ></SearchFormInput>\n      <SearchBtn type=\"submit\">Search</SearchBtn>\n    </SearchForm>\n  );\n};\n","import MovieDetails from 'pages/MovieDeatails/MovieDatails';\nimport { Search } from 'components/Search/Search';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\n\nimport { fetchSearch } from 'services/api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const { movieId } = useParams();\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    if (!movieId) return;\n  }, [movieId]);\n\n  const handleSubmit = value => {};\n\n  useEffect(() => {\n    if (query) {\n      fetchSearch(query).then(movies => {\n        if (movies.results.length > 0) {\n          setMovies(movies.results);\n        }\n      });\n    }\n  }, [query]);\n\n  return (\n    <main>\n      <Search onSubmit={handleSubmit}></Search>\n      <MoviesList movies={movies}></MoviesList>\n      <MovieDetails movieId={movieId}></MovieDetails>\n    </main>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nconst api_key = '4ee590f8afe314c87c8a374d8548e25b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport async function fetchTrend() {\n  try {\n    const result = await axios.get(\n      `${BASE_URL}/trending/all/day?api_key=${api_key}&language=en-US`\n    );\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchSearch(value) {\n  try {\n    const result = await axios.get(\n      `${BASE_URL}/search/movie?query=${value}&include_adult=false&api_key=${api_key}&language=en-US&page=1`\n    );\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchMovieDetails(id) {\n  try {\n    const result = await axios.get(\n      `${BASE_URL}/movie/${id}?api_key=${api_key}&language=en-US`\n    );\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchCast(id) {\n  try {\n    const result = await axios.get(\n      `${BASE_URL}/movie/${id}/credits?api_key=${api_key}&language=en-US`\n    );\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function fetchReview(id) {\n  try {\n    const result = await axios.get(\n      `${BASE_URL}/movie/${id}/reviews?api_key=${api_key}&language=en-US&page=1`\n    );\n    return result.data;\n  } catch (error) {\n    throw error;\n  }\n}\n"],"names":["MovieList","styled","_templateObject","_taggedTemplateLiteral","MovieItem","_templateObject2","MovieImg","_templateObject3","_ref","movies","location","useLocation","_jsx","children","map","movie","_movie$name","name","title","_jsxs","Link","to","concat","id","state","_Fragment","poster_path","src","alt","Style","GoBackLink","MovieName","_templateObject4","OverviewText","_templateObject5","GenresText","_templateObject6","_templateObject7","GenresStyles","_templateObject8","NavList","_templateObject9","_templateObject10","MovieInfo","_templateObject11","Movie","_templateObject12","AdditionalNav","_templateObject13","NavLinkStyled","NavLink","_templateObject14","MovieDetails","_location$state$from","_location$state","_backLink$from","movieId","useParams","setMovie","useState","backLink","useRef","from","useEffect","async","fetchedMovie","fetchMovieDetails","releaseYear","Date","release_date","getFullYear","percentage","vote_average","error","console","fetchData","Math","round","overview","genres","genre","Suspense","fallback","Loader","Outlet","SearchForm","SearchFormInput","SearchBtn","Search","onSubmit","searchParams","setSearchParams","useSearchParams","inputValue","setInputValue","e","preventDefault","log","query","trim","type","autoComplete","autoFocus","value","onChange","currentTarget","Movies","setMovies","get","fetchSearch","then","results","length","MoviesList","api_key","BASE_URL","fetchTrend","axios","data","fetchCast","fetchReview"],"sourceRoot":""}